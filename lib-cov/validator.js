/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['validator.js']) {
  _$jscoverage['validator.js'] = [];
  _$jscoverage['validator.js'][1] = 0;
  _$jscoverage['validator.js'][3] = 0;
  _$jscoverage['validator.js'][4] = 0;
  _$jscoverage['validator.js'][5] = 0;
  _$jscoverage['validator.js'][8] = 0;
  _$jscoverage['validator.js'][9] = 0;
  _$jscoverage['validator.js'][10] = 0;
  _$jscoverage['validator.js'][11] = 0;
  _$jscoverage['validator.js'][14] = 0;
  _$jscoverage['validator.js'][15] = 0;
  _$jscoverage['validator.js'][16] = 0;
  _$jscoverage['validator.js'][19] = 0;
  _$jscoverage['validator.js'][20] = 0;
  _$jscoverage['validator.js'][21] = 0;
  _$jscoverage['validator.js'][23] = 0;
  _$jscoverage['validator.js'][26] = 0;
  _$jscoverage['validator.js'][27] = 0;
  _$jscoverage['validator.js'][28] = 0;
  _$jscoverage['validator.js'][30] = 0;
  _$jscoverage['validator.js'][33] = 0;
  _$jscoverage['validator.js'][34] = 0;
  _$jscoverage['validator.js'][35] = 0;
  _$jscoverage['validator.js'][37] = 0;
  _$jscoverage['validator.js'][40] = 0;
  _$jscoverage['validator.js'][41] = 0;
  _$jscoverage['validator.js'][42] = 0;
  _$jscoverage['validator.js'][44] = 0;
  _$jscoverage['validator.js'][47] = 0;
  _$jscoverage['validator.js'][48] = 0;
  _$jscoverage['validator.js'][49] = 0;
  _$jscoverage['validator.js'][51] = 0;
  _$jscoverage['validator.js'][54] = 0;
  _$jscoverage['validator.js'][55] = 0;
  _$jscoverage['validator.js'][56] = 0;
  _$jscoverage['validator.js'][58] = 0;
  _$jscoverage['validator.js'][61] = 0;
  _$jscoverage['validator.js'][62] = 0;
  _$jscoverage['validator.js'][63] = 0;
  _$jscoverage['validator.js'][65] = 0;
  _$jscoverage['validator.js'][68] = 0;
  _$jscoverage['validator.js'][69] = 0;
  _$jscoverage['validator.js'][70] = 0;
  _$jscoverage['validator.js'][72] = 0;
  _$jscoverage['validator.js'][75] = 0;
  _$jscoverage['validator.js'][76] = 0;
  _$jscoverage['validator.js'][77] = 0;
  _$jscoverage['validator.js'][79] = 0;
  _$jscoverage['validator.js'][82] = 0;
  _$jscoverage['validator.js'][83] = 0;
  _$jscoverage['validator.js'][84] = 0;
  _$jscoverage['validator.js'][86] = 0;
  _$jscoverage['validator.js'][89] = 0;
  _$jscoverage['validator.js'][90] = 0;
  _$jscoverage['validator.js'][93] = 0;
  _$jscoverage['validator.js'][94] = 0;
  _$jscoverage['validator.js'][95] = 0;
  _$jscoverage['validator.js'][97] = 0;
  _$jscoverage['validator.js'][100] = 0;
  _$jscoverage['validator.js'][101] = 0;
  _$jscoverage['validator.js'][102] = 0;
  _$jscoverage['validator.js'][104] = 0;
  _$jscoverage['validator.js'][107] = 0;
  _$jscoverage['validator.js'][108] = 0;
  _$jscoverage['validator.js'][109] = 0;
  _$jscoverage['validator.js'][111] = 0;
  _$jscoverage['validator.js'][114] = 0;
  _$jscoverage['validator.js'][115] = 0;
  _$jscoverage['validator.js'][116] = 0;
  _$jscoverage['validator.js'][118] = 0;
  _$jscoverage['validator.js'][121] = 0;
  _$jscoverage['validator.js'][122] = 0;
  _$jscoverage['validator.js'][123] = 0;
  _$jscoverage['validator.js'][125] = 0;
  _$jscoverage['validator.js'][128] = 0;
  _$jscoverage['validator.js'][129] = 0;
  _$jscoverage['validator.js'][130] = 0;
  _$jscoverage['validator.js'][132] = 0;
  _$jscoverage['validator.js'][135] = 0;
  _$jscoverage['validator.js'][136] = 0;
  _$jscoverage['validator.js'][137] = 0;
  _$jscoverage['validator.js'][139] = 0;
  _$jscoverage['validator.js'][140] = 0;
  _$jscoverage['validator.js'][142] = 0;
  _$jscoverage['validator.js'][145] = 0;
  _$jscoverage['validator.js'][146] = 0;
  _$jscoverage['validator.js'][147] = 0;
  _$jscoverage['validator.js'][149] = 0;
  _$jscoverage['validator.js'][150] = 0;
  _$jscoverage['validator.js'][152] = 0;
}
_$jscoverage['validator.js'][1]++;
var Validator = exports.Validator = (function () {
});
_$jscoverage['validator.js'][3]++;
exports.check = (function (str, fail_msg) {
  _$jscoverage['validator.js'][4]++;
  var validator = new Validator();
  _$jscoverage['validator.js'][5]++;
  return validator.check(str, fail_msg);
});
_$jscoverage['validator.js'][8]++;
Validator.prototype.check = (function (str, fail_msg) {
  _$jscoverage['validator.js'][9]++;
  this.str = String(str || "");
  _$jscoverage['validator.js'][10]++;
  this.msg = fail_msg;
  _$jscoverage['validator.js'][11]++;
  return this;
});
_$jscoverage['validator.js'][14]++;
Validator.prototype.error = (function (msg) {
  _$jscoverage['validator.js'][15]++;
  throw msg;
  _$jscoverage['validator.js'][16]++;
  return this;
});
_$jscoverage['validator.js'][19]++;
Validator.prototype.isEmail = (function () {
  _$jscoverage['validator.js'][20]++;
  if (! this.str.match(/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/)) {
    _$jscoverage['validator.js'][21]++;
    this.error(this.msg || "Invalid email");
  }
  _$jscoverage['validator.js'][23]++;
  return this;
});
_$jscoverage['validator.js'][26]++;
Validator.prototype.isUrl = (function () {
  _$jscoverage['validator.js'][27]++;
  if (! this.str.match(/^(?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)?(?:\w+:\w+@)?((?:(?:[-\w\d{1-3}]+\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\.uk|ac\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2})?)|((\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)(\.(\b25[0-5]\b|\b[2][0-4][0-9]\b|\b[0-1]?[0-9]?[0-9]\b)){3}))(?::[\d]{1,5})?(?:(?:(?:\/(?:[-\w~!$+|.,=]|%[a-f\d]{2})+)+|\/)+|\?|#)?(?:(?:\?(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)(?:&(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)*)*(?:#(?:[-\w~!$ |/.,*:;=]|%[a-f\d]{2})*)?$/)) {
    _$jscoverage['validator.js'][28]++;
    this.error(this.msg || "Invalid URL");
  }
  _$jscoverage['validator.js'][30]++;
  return this;
});
_$jscoverage['validator.js'][33]++;
Validator.prototype.isIP = (function () {
  _$jscoverage['validator.js'][34]++;
  if (! this.str.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)) {
    _$jscoverage['validator.js'][35]++;
    this.error(this.msg || "Invalid IP");
  }
  _$jscoverage['validator.js'][37]++;
  return this;
});
_$jscoverage['validator.js'][40]++;
Validator.prototype.isAlpha = (function () {
  _$jscoverage['validator.js'][41]++;
  if (! this.str.match(/^[a-zA-Z]+$/)) {
    _$jscoverage['validator.js'][42]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][44]++;
  return this;
});
_$jscoverage['validator.js'][47]++;
Validator.prototype.isAlphanumeric = (function () {
  _$jscoverage['validator.js'][48]++;
  if (! this.str.match(/^[a-zA-Z0-9]+$/)) {
    _$jscoverage['validator.js'][49]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][51]++;
  return this;
});
_$jscoverage['validator.js'][54]++;
Validator.prototype.isNumeric = (function () {
  _$jscoverage['validator.js'][55]++;
  if (! this.str.match(/^-?[0-9]+$/)) {
    _$jscoverage['validator.js'][56]++;
    this.error(this.msg || "Invalid number");
  }
  _$jscoverage['validator.js'][58]++;
  return this;
});
_$jscoverage['validator.js'][61]++;
Validator.prototype.isLowercase = (function () {
  _$jscoverage['validator.js'][62]++;
  if (! this.str.match(/^[a-z0-9]+$/)) {
    _$jscoverage['validator.js'][63]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][65]++;
  return this;
});
_$jscoverage['validator.js'][68]++;
Validator.prototype.isUppercase = (function () {
  _$jscoverage['validator.js'][69]++;
  if (! this.str.match(/^[A-Z0-9]+$/)) {
    _$jscoverage['validator.js'][70]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][72]++;
  return this;
});
_$jscoverage['validator.js'][75]++;
Validator.prototype.isInt = (function () {
  _$jscoverage['validator.js'][76]++;
  if (! this.str.match(/^(?:-?(?:0|[1-9][0-9]*))$/)) {
    _$jscoverage['validator.js'][77]++;
    this.error(this.msg || "Invalid integer");
  }
  _$jscoverage['validator.js'][79]++;
  return this;
});
_$jscoverage['validator.js'][82]++;
Validator.prototype.isDecimal = (function () {
  _$jscoverage['validator.js'][83]++;
  if (! this.str.match(/^(?:-?(?:0|[1-9][0-9]*))?(?:\.[0-9]*)?$/)) {
    _$jscoverage['validator.js'][84]++;
    this.error(this.msg || "Invalid decimal");
  }
  _$jscoverage['validator.js'][86]++;
  return this;
});
_$jscoverage['validator.js'][89]++;
Validator.prototype.isFloat = (function () {
  _$jscoverage['validator.js'][90]++;
  Validator.prototype.isDecimal();
});
_$jscoverage['validator.js'][93]++;
Validator.prototype.notNull = (function () {
  _$jscoverage['validator.js'][94]++;
  if (this.str === "") {
    _$jscoverage['validator.js'][95]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][97]++;
  return this;
});
_$jscoverage['validator.js'][100]++;
Validator.prototype.isNull = (function () {
  _$jscoverage['validator.js'][101]++;
  if (this.str !== "") {
    _$jscoverage['validator.js'][102]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][104]++;
  return this;
});
_$jscoverage['validator.js'][107]++;
Validator.prototype.notEmpty = (function () {
  _$jscoverage['validator.js'][108]++;
  if (this.str.match(/^[\s\t\r\n]*$/)) {
    _$jscoverage['validator.js'][109]++;
    this.error(this.msg || "String is whitespace");
  }
  _$jscoverage['validator.js'][111]++;
  return this;
});
_$jscoverage['validator.js'][114]++;
Validator.prototype.equals = (function (equals) {
  _$jscoverage['validator.js'][115]++;
  if (this.str != equals) {
    _$jscoverage['validator.js'][116]++;
    this.error(this.msg || "Not equal");
  }
  _$jscoverage['validator.js'][118]++;
  return this;
});
_$jscoverage['validator.js'][121]++;
Validator.prototype.contains = (function (str) {
  _$jscoverage['validator.js'][122]++;
  if (this.str.indexOf(str) === -1) {
    _$jscoverage['validator.js'][123]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][125]++;
  return this;
});
_$jscoverage['validator.js'][128]++;
Validator.prototype.notContains = (function (str) {
  _$jscoverage['validator.js'][129]++;
  if (this.str.indexOf(str) >= 0) {
    _$jscoverage['validator.js'][130]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][132]++;
  return this;
});
_$jscoverage['validator.js'][135]++;
Validator.prototype.regex = (function (pattern, modifiers) {
  _$jscoverage['validator.js'][136]++;
  if (typeof pattern !== "function") {
    _$jscoverage['validator.js'][137]++;
    pattern = new RegExp(pattern, modifiers || "");
  }
  _$jscoverage['validator.js'][139]++;
  if (! this.str.match(pattern)) {
    _$jscoverage['validator.js'][140]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][142]++;
  return this;
});
_$jscoverage['validator.js'][145]++;
Validator.prototype.notRegex = (function (pattern, modifiers) {
  _$jscoverage['validator.js'][146]++;
  if (typeof pattern !== "function") {
    _$jscoverage['validator.js'][147]++;
    pattern = new RegExp(pattern, modifiers || "");
  }
  _$jscoverage['validator.js'][149]++;
  if (this.str.match(pattern)) {
    _$jscoverage['validator.js'][150]++;
    this.error(this.msg || "Invalid characters");
  }
  _$jscoverage['validator.js'][152]++;
  return this;
});
_$jscoverage['validator.js'].source = ["var Validator = exports.Validator = function() {}","","exports.check = function(str, fail_msg) {","    var validator = new Validator();","    return validator.check(str, fail_msg);","}","","Validator.prototype.check = function(str, fail_msg) {","    this.str = String(str || '');","    this.msg = fail_msg;","    return this;","}","","Validator.prototype.error = function(msg) {","    throw msg;","    return this;","}","","Validator.prototype.isEmail = function() {","    if (!this.str.match(/^(?:[\\w\\!\\#\\$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/)) {","        this.error(this.msg || 'Invalid email');","    }","    return this;","}","","Validator.prototype.isUrl = function() {","    if (!this.str.match(/^(?:(?:ht|f)tp(?:s?)\\:\\/\\/|~\\/|\\/)?(?:\\w+:\\w+@)?((?:(?:[-\\w\\d{1-3}]+\\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\\.uk|ac\\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2})?)|((\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)(\\.(\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)){3}))(?::[\\d]{1,5})?(?:(?:(?:\\/(?:[-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?(?:(?:\\?(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)(?:&amp;(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*(?:#(?:[-\\w~!$ |/.,*:;=]|%[a-f\\d]{2})*)?$/)) {","        this.error(this.msg || 'Invalid URL');","    }","    return this;","}","","Validator.prototype.isIP = function() {","    if (!this.str.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)) {","        this.error(this.msg || 'Invalid IP');","    }","    return this;","}","","Validator.prototype.isAlpha = function() {","    if (!this.str.match(/^[a-zA-Z]+$/)) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.isAlphanumeric = function() {","    if (!this.str.match(/^[a-zA-Z0-9]+$/)) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.isNumeric = function() {","    if (!this.str.match(/^-?[0-9]+$/)) {","        this.error(this.msg || 'Invalid number');","    }","    return this;","}","","Validator.prototype.isLowercase = function() {","    if (!this.str.match(/^[a-z0-9]+$/)) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.isUppercase = function() {","    if (!this.str.match(/^[A-Z0-9]+$/)) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.isInt = function() {","    if (!this.str.match(/^(?:-?(?:0|[1-9][0-9]*))$/)) {","        this.error(this.msg || 'Invalid integer');","    }","    return this;","}","","Validator.prototype.isDecimal = function() {","    if (!this.str.match(/^(?:-?(?:0|[1-9][0-9]*))?(?:\\.[0-9]*)?$/)) {","        this.error(this.msg || 'Invalid decimal');","    }","    return this;","}","","Validator.prototype.isFloat = function() {","    Validator.prototype.isDecimal();","}","","Validator.prototype.notNull = function() {","    if (this.str === '') {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.isNull = function() {","    if (this.str !== '') {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.notEmpty = function() {","    if (this.str.match(/^[\\s\\t\\r\\n]*$/)) {","        this.error(this.msg || 'String is whitespace');","    }","    return this;","}","","Validator.prototype.equals = function(equals) {","    if (this.str != equals) {","        this.error(this.msg || 'Not equal');","    }","    return this;","}","","Validator.prototype.contains = function(str) {","    if (this.str.indexOf(str) === -1) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.notContains = function(str) {","    if (this.str.indexOf(str) &gt;= 0) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.regex = function(pattern, modifiers) {","    if (typeof pattern !== 'function') {","        pattern = new RegExp(pattern, modifiers || '');","    }","    if (! this.str.match(pattern)) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}","","Validator.prototype.notRegex = function(pattern, modifiers) {","    if (typeof pattern !== 'function') {","        pattern = new RegExp(pattern, modifiers || '');","    }","    if (this.str.match(pattern)) {","        this.error(this.msg || 'Invalid characters');","    }","    return this;","}"];
